# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, pkgs, lib, utils, modulesPath, ... }:
{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "thunderbolt" "usb_storage" "sd_mod" "sdhci_pci" ];
  boot.initrd.kernelModules = [ "amdgpu" ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.supportedFilesystems = [ "overlay" "btrfs" "zfs" ];
  boot.extraModulePackages = with config.boot.kernelPackages; [
    v4l2loopback
  ];
  boot.extraModprobeConfig = ''
    options v4l2loopback devices=1 video_nr=1 card_label="OBS Cam" exclusive_caps=1
  '';
  boot.kernelPackages = pkgs.linuxPackages;
  boot.kernelParams = [
    "amd_pstate=active"
  ];
  networking.hostId = "4ce220a9";

  boot.zfs.requestEncryptionCredentials = [];

  boot.initrd.extraUtilsCommands = lib.mkIf (!config.boot.initrd.systemd.enable) (let
    cfgZfs = config.boot.zfs;
  in ''
    copy_bin_and_libs ${pkgs.gnupg}/bin/gpg
    copy_bin_and_libs ${pkgs.gnupg}/bin/gpg-agent
    copy_bin_and_libs ${pkgs.gnupg}/libexec/scdaemon
    copy_bin_and_libs ${pkgs.pcscliteWithPolkit}/bin/pcscd
    copy_bin_and_libs ${cfgZfs.package}/sbin/zfs
    copy_bin_and_libs ${cfgZfs.package}/sbin/zdb
    copy_bin_and_libs ${cfgZfs.package}/sbin/zpool
    copy_bin_and_libs ${cfgZfs.package}/lib/udev/vdev_id
    copy_bin_and_libs ${cfgZfs.package}/lib/udev/zvol_id
  '');
  boot.initrd.postResumeCommands = lib.mkIf (!config.boot.initrd.systemd.enable) (lib.mkAfter ''
    mkdir -p /crypt-ramfs
    export GNUPGHOME=/crypt-ramfs/.gnupg
    mkdir -p /crypt-ramfs/public
    mount -t zfs -o zfsutil zpool/public /crypt-ramfs/public
    gpg-agent --daemon --scdaemon-program $out/bin/scdaemon
    pcscd -x
    gpg --import /crypt-ramfs/public/canokey.asc
    gpg --pinentry-mode loopback --passphrase 101223zy --decrypt /crypt-ramfs/public/zpool.key.gpg | zfs load-key -- zpool/keys
    # Require passphrase in case the above fails
    zfs load-key -- zpool/keys
    mkdir -p "/Y:/"
    mount -t zfs -o zfsutil zpool/keys "/Y:/"
    zfs load-key -a
    umount "/Y:/"
    umount /mnt/zpool/public
  '');
  boot.initrd.systemd = let
    getMount = mountPoint: utils.escapeSystemdPath ("/sysroot" + (lib.removeSuffix "/" mountPoint));
  in {
    enable = true;
    services.zfs-decrypt-zpool-keys = {
      description = "Decrypt ZFS dataset zpool/keys";
      requires = [
        "zfs-import.target"
      ];
      after = [
        "zfs-import.target"
        (getMount "/X:")
      ];
      requiredBy = [
        (getMount "/Y:")
      ];
      before = [
        (getMount "/Y:")
        "shutdown.target"
      ];
      conflicts = [ "shutdown.target" ];
      unitConfig = {
        DefaultDependencies = "no";
      };
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
      };
      script = ''
        ${config.boot.zfs.package}/sbin/zfs load-key zpool/keys
      '';
    };
    services.zfs-decrypt-zpool-others = {
      description = "Decrypt ZFS dataset zpool/*";
      requires = [
        "zfs-import.target"
      ];
      after = [
        "zfs-import.target"
        (getMount "/Y:")
      ];
      requiredBy = [
        (getMount "/nix")
      ];
      before = [
        (getMount "/nix")
        "shutdown.target"
      ];
      conflicts = [ "shutdown.target" ];
      unitConfig = {
        DefaultDependencies = "no";
      };
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
      };
      script = ''
        ${config.boot.zfs.package}/sbin/zfs load-key -a
      '';
    };
  };

  hardware.graphics.enable = true;
  hardware.graphics.enable32Bit = true;
  hardware.graphics.extraPackages = [
    pkgs.amdvlk # for Vulkan
    # pkgs.rocmPackages.clr.icd # for OpenCL support
  ];
  hardware.graphics.extraPackages32 = [
    pkgs.driversi686Linux.amdvlk # for Vulkan
  ];
  hardware.amdgpu.initrd.enable = true;

  hardware.bluetooth.enable = true;

  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
  hardware.enableRedistributableFirmware = true;

  fileSystems."/" = {
    device = "tmpfs";
    fsType = "tmpfs";
    neededForBoot = true;
    options = [ "defaults" "size=64G" "mode=755" ];
  };

  fileSystems."/X:" = {
    device = "zpool/public";
    fsType = "zfs";
    neededForBoot = true;
    options = [ "zfsutil" ];
    depends = [ "/" ];
  };

  fileSystems."/Y:" = {
    device = "zpool/keys";
    fsType = "zfs";
    neededForBoot = true;
    options = [ "zfsutil" ];
    depends = [ "/X:" ];
  };

  fileSystems."/nix" = {
    device = "zpool/nixos";
    fsType = "zfs";
    neededForBoot = true;
    options = [ "zfsutil" ];
    depends = [ "/Y:" ];
  };

  fileSystems."/nix/persist" = {
    device = "zpool/nixos/persist";
    fsType = "zfs";
    neededForBoot = true;
    options = [ "zfsutil" ];
    depends = [ "/nix" "/Y:" ];
  };

  fileSystems."/mnt/shared" = {
    device = "zpool/shared";
    fsType = "zfs";
    options = [ "zfsutil" ];
    depends = [ "/Y:" ];
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/889D-C417";
    fsType = "vfat";
    options = [ "umask=0077" ];
  };

  swapDevices = [
    {
      device = "/dev/disk/by-uuid/2dec9ec9-8ea9-4cb7-8250-dd1fd9757614";
    }
  ];

}
